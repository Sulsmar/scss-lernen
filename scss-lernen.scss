//Variablen//

$font-stack: Roboto, sans-serif;
$secondary-color: #6f6f6f;
$primary-color: #FFF;
$border: 5px solid $primary-color;
$my-class: klasse;
$list-eins: black, red, green, blue;

body {
    font: $font-stack;
}
//-------------------------------------------------------------------------------------------------------------//
//Datentypen//
$string: 'Schwarz ist bunt genug'; //Strings können mit '' oder "" geschrieben werden
$list: "blue", blue, 5 , green; //Liste mit verschiedenen Typen in der Liste
$map: ('Linux' : true, $list : List); 

//Nesting//

div {
    a {
        p {
            color: $secondary-color;
        }
    }
}
//-------------------------------------------------------------------------------------------------------------//
//Partials, Imports//

/// Style Dokumente die Importiert werden, werden mit _dokumentenname.scss erzeugt. Diese werden nicht automatisch umgewandelt in klassisches CSS.
/// import wird das ganze in der klassischen dokumentenname.scss mit @import "_dokumentenname.scss".
/// Wichtig! Es kommt qauf die Position des Imports an, da genau an dieser Stelle die Daten aus der importierten Datei verwendet werden!

//-------------------------------------------------------------------------------------------------------------//
//Mixins (includes) //

@mixin flex {
    display: flex;
    display: -webkit-flex;
}

div {
    @include flex();
}


//Mixins mit Parameter//@include

@mixin my-border {
    border: {
        width: 5px;
        style: solid;
        color: $primary-color;
    }
}

div {
    @include my-border();
}

//mit Überladung

@mixin my-border ($color, $width) {
    border: {
        width: $width;
        style: solid;
        color: $color;
    }
}

div {
    @include my-border($primary-color, 5px); //Solid bleibt, color und width werden mit Variablen übergeben. Es ist die korrekte Reihenfolge bei der Übergabe wichtig!

}


//mit Standartparameter

@mixin my-border($color: $primary-color, $width: 3px){
    width: $width;
    style: solid;
    color: $color;
}

div {
    @include my-border(); /// Wenn keine Werte übergeben werden, werden die Standartwerte verarbeitet. Es ist die korrekte Reihenfolge der Übergabe wichtig!
}
//-------------------------------------------------------------------------------------------------------------//
//Mathematische Operatoren in Style Sheets//
/// es kann +, -, *, /, % und round() verwendet werden.

div {
    width: (8px / 2); //Der Wert nach dem Mathematischen Zeichen kann keine Größeneinheit besitzen, sonst löst es einen Fehler aus. z.B. width: (8px / 2px); funkioniert nicht!!!
}

//mit Varialen

div {
    width: $width / 3; // Bei Verwendung von Variablen wird die Berechnung ohne Klammern geschrieben.
}

//round()

div {
    width: round($width / 5); //rundet auf bzw. ab zur nächsten Ganzzahl
}

//Modulo

div {
    width: $width % 3; // mit Rest! Es wird nur der Rest angezeigt bzw. verwendet!!!
}
//-------------------------------------------------------------------------------------------------------------//
//Interpolation mit # {}//

//<p class= "klasse"></p>

p.#{$my-class} {
    color: $secondary-color;
}
// in reinem css würde es wie folgt aussehen
p.klasse {
    color: #6f6f6f;
}
//-------------------------------------------------------------------------------------------------------------//

//!default//
// kann man Variablen anhängen um zu verhindern das eine bestehende Variable überschrieben wird, dabei wird nicht die erste Variable damit geschützt, 
// sodern es wird angehängt an eine weitere Variable mit dem selben Namen und das System überprüft ob diese schon gesetzt ist und verhindert eine Änderung!

$eins: blue;
$eins: green !default;

// Variable $eins bleibt weiterhin blue. 

//-------------------------------------------------------------------------------------------------------------//

//@media//

// <div class="wrapper"></div>

.wrapper {
    background-color: antiquewhite;
    @media screen and (orientation: landscape) {
        background-color:#333333;
    }
}

//-------------------------------------------------------------------------------------------------------------//

// if Anweisungen //
$border-gewuenscht: true;
$width-two:if($border-gewuenscht, 10px, 0px);

body {
    border: $width-two solid black;
}

// in dem Beispiel wird die Border solange in der Variable $border-gewuenscht true steht die Border mit 10 px angezeit.
// wird dieser wert auf false gesetzt nimmt das System den 2. Wert also 0px.

// zweite Variante//
$border-gewuenscht: false;

body {
    @if $border-gewuenscht {
        border: 10px solid black;
    }
}

// in scss hat auch null den Stellenwert von false.
// also geht auch $border-gewuenscht: null;

//-------------------------------------------------------------------------------------------------------------//

// for Schleifen //

// <div class="box1></div>

@for $i from 1 through 4 {            // Vom System wird @for $i from 1 to 4 generiert
    .box#{$i} {                       // $i erhält automatisch den ersten Wert und zählt bis einschließlich den zweitern Wert hoch
        width: 10px * $i;
    }
}

// kombiniert mit if
@for $i from 1 through 4 {            
    .box#{$i} {  
        @if $i == 3 {
            background-color: aqua;
        }                     
        width: 10px * $i;
    }
}

//-------------------------------------------------------------------------------------------------------------//

// each Schleife//

@each $color in $list-eins {  // die Variable $color nimmt immer den Wert der aktuellen Position der Liste an!
    .#{$color} {
        background-color: $color;
    }
}
// es wird automatisch die Klasse entsprechend  der Farbe der Postiotion der Liste erzeugt und die Hintergrundfarbe auf diese Farbe gesetzt.

//-------------------------------------------------------------------------------------------------------------//

// Extends //
// erlaubt nicht wie @mixin  Parameter

%my-appearence {
    border: 1px solid black;
    padding: 10px;
}

.box1 {
    @extend %my-appearence;
}

.box2 {
    @extend %my-appearence;
}

// Das System erzeugt keine css wie bei Mixin nacheinander sondern gekoppelt
// damit geringere Dateigröße und dadurch auch weniger Traffic

.box1, .box2 {
    border: 1px solid black;
    padding: 10px;
}

//-------------------------------------------------------------------------------------------------------------//

// Debugg Nachrichten //

.box2 {
    @debug "Hallo Welt";
    @warn "ohje das geht schief";
    @error "na Klasse der Wolfgang wars"; // Compelieren bricht ab
}

.box1 {
    $width: -1px;
    @warn "ohje das geht schief. Breite ist #{$width}";
}

//-------------------------------------------------------------------------------------------------------------//

//der & Marker//

.box3 {
    background-color: greenyellow;
    &:hover {
        background-color: beige;
    }
}


//-------------------------------------------------------------------------------------------------------------//

// leichte Farbfunktionen //

//aufhellen//
@mixin link-color($color) {
    color: $color;
    &:hover , &:active , &:focus {
        color: lighten($color: $color, 25%); // lighten ist eine feste Funktion in scss, es wird bestimmt welche Farbe  verwendet werden soll 
    }                                        // und um wieviel Prozent sie aufgehellt werden soll!
}

div {
    @include link-color(#555);
}

//abdunkeln//
@mixin link-color($color) {
    color: $color;
    &:hover , &:active , &:focus {
        color: darken($color: $color, 25%); // darken ist eine feste Funktion in scss, es wird bestimmt welche Farbe  verwendet werden soll 
    }                                        // und um wieviel Prozent sie abgedunkelt werden soll!
}

div {
    @include link-color(#ccc);
}

//-------------------------------------------------------------------------------------------------------------//

// Hersteller Präfixe Mixin //

//manuell erstellt //
div {
    width: 100 px;
    background-color: red;
    -webkit-transition: 2s;
    -moz-transition: 2s;
    -ms-transition: 2s;
    -o-transition: 2s;
    transition: 2s;
}

div:hover {
    width: 500 px;
}

// automatisch erstellen und für vieles weitere Verfügbar machen //
@mixin vendorPrefix($attribute, $value) {
    @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
        #{$prefix}#{$attribute}: $value;
    }
}

div {
    width: 100 px;
    background-color: red;
    @include vendorPrefix(transition, 2s)
}

div:hover {
    width: 500 px;
}

//-------------------------------------------------------------------------------------------------------------//

// Stanzeffekt Mixin //

@mixin stanzEffekt($opacity1, $opacity2) {
    text-shadow: -1px -1px 1px rgba(255,255,255,$opacity1), 1px 1px 1px rgba(0,0,0,$opacity2);
}

a {
    @include stanzEffekt(0.3, 0.3);
    font: 80px Arial;
    color: beige;
}

//-------------------------------------------------------------------------------------------------------------//

// Responsive Breakpoints //

@mixin breakPoint($medium) {
    @if $medium == desktop {
        @media (min-width: 1281px) {
            @content;
        }
    }
    @else if $medium == tablet {
        @media (min-width: 768px) {
            @content;
        }
    }
    @else if $medium == mobile {
        @media (min-width: 320px) {
            @content;
        }
    }
}

div {
    background:  $primary-color;
    width: 75%;
    @include breakPoint(desktop) {width: 60%;}
    @include breakPoint(tablet) {width: 80%;}
    @include breakPoint(mobile) {width: 95%;}
}

//-------------------------------------------------------------------------------------------------------------//

// Ein und Ausblenden //

@mixin toggle($show) {
    @if $show {             // ist automatisch true;
        visibility: visible;
        opacity: 1;
        transition: visible 1s, opacity 1s;
    }
    @else if not $show {        // not ist wie in anderen Sprachen !$show also false.
        visibility: visible;
        opacity: 0;
        transition: visible 1s, opacity 1s;
    }
}

.wrapper .box1 {
    @include toggle(false);
}
.wrapper:hover .box1 {
    @include toggle(true);
}
//-------------------------------------------------------------------------------------------------------------//

// Mit Listen arbeiten //

$variable: red, green, blue;
$farbschema2: #FF0, #0FF, #F0F;
$das-neue-farbschema: join($variable, $farbschema2);

a {
    @include stanzEffekt(0.3, 0.3);
    font: 80px Arial;
    color: nth($variable, 1); // nth bedeutet das nte Element, in scss werden Listenelemente immer mit 1 angefangen nicht mit 0!
}
// eine Element in der Liste ersetzten//
$das-neue-farbschema: set-nth($das-neue-farbschema , 4 , #885); 
// Es wird das vierte Element in der Liste mit der Farbe #885 ersetzt.es wird aber nur der Wert in der Liste  das-neue-Farbschema ersetzt, 
//die anderen Listen wie Farbschema 2 das mit join verwendet worden ist bleibt davon unberührt!

// Liste um ein weiteres Element erweitern //
$das-neue-farbschema: append($das-neue-farbschema, #FF0);

//-------------------------------------------------------------------------------------------------------------//

// Mit Maps arbeiten //

$map1: (yellow: #FF0, red: #F00);
$map2: (wolfisblau: #6495ed, orange: #ffa500);
$neue-map: map-merge($map1 , $map2); // Maps zusammenführen
$reduzierte-map: map-remove($map1, red ); // es wird über den Key entfernt

a {
    @include stanzEffekt(0.3, 0.3);
    font: 80px Arial;
    color: map-get($map2, wolfisblau ) // es wird die Map und der Key angegeben.
}

// Es kann auch noch mit folgenden Funktionen ausgelesen werden:
// map-keys, map-values ,map-has-key

//-------------------------------------------------------------------------------------------------------------//

// nützliche Scss-Funktionen //

// überprüfen ob Variable existiert//

a {
    @include stanzEffekt(0.3, 0.3);
    font: 80px Arial;
    @if variable-exists(primary-color){  // es wird in der Klammer ohne das $ geschrieben!
        color: $primary-color;
    }
    @else {
        color: black;
    }
}


//  überprüfen ob Funktion existiert //
a {
    @include stanzEffekt(0.3, 0.3);
    font: 80px Arial;
    @if function-exists(darken) { 
        color: darken($primary-color, 25%);
    }
    @else {
        color: black;
    }
}

// überprüfen ob mixin existiert // 
a {
    @include stanzEffekt(0.3, 0.3);
    font: 80px Arial;
    @if mixin-exists(link-color) { 
        color: darken($primary-color, 25%);
    }
    @else {
        color: black;
    }
}

// unitless //
// überprüft ob eine Variable eine Einheit wie z.B. px hat
$font-size: 80px;
$link-font-size: 20px;

a {
    @include stanzEffekt(0.3, 0.3);
    @if unitless($font-size) and not unitless($link-font-size) {
        font-size: $font-size * $link-font-size;
    }
    @else if unitless($link-font-size) and not unitless($font-size) {
        font-size: $font-size * $link-font-size;
    }
    @else if not unitless($font-size) {
        font-size: $font-size;
    }
    @else {
        font-size: $font-size + px;
    }
    
}
//-------------------------------------------------------------------------------------------------------------//